head	1.3;
access;
symbols;
locks;
comment	@ * @;


1.3
date	99.01.06.12.13.01;	author schj;	state Alpha;
branches;
next	1.2;

1.2
date	99.01.06.12.07.49;	author schj;	state Alpha;
branches;
next	1.1;

1.1
date	95.11.14.20.32.31;	author schj;	state Exp;
branches;
next	;


desc
@header for programs using the marquardt library
@


1.3
log
@Version: 0.99g
@
text
@#ifndef _MAQ_H_
#define _MAQ_H_

#include <stdlib.h>

#ifdef HAVE_CONFIG_H
#include "vconfig.h"
#endif
#ifdef HAVE_LIBSLANG
#include "slang.h"
#endif

#define MINM 2
#define true 1
#define false 0
#define PROGNAME "Marquardt"

extern  double diffac;
extern  int func_error;
extern  int maqverb;
extern	double *inp;
extern	double *out;
extern	double **jjinv;
extern	double *par;
extern  int *fixed;
extern	double *rv;
extern int  (*allfunc) (double *par, int mmm, int nnn);

extern	int Marquardt  (int m_, int n_,double *par_, double *g, double **v, double *inp, double *out);
extern int Funct  (int m, int n, double *par, double *rv);
extern int maqinit  (int *m, int *n);
extern void maqend  (int *m);
extern void prhead  (void);
extern void prtail  (void);

/* Stuff from memory.c */
extern double **m_matr  (int rows, int cols);
extern void m_free_matr  (double **m, int rows);
extern void *m_memory  (void *ptr, size_t size,const char *progname);

extern int maq_n;
extern int maq_m;
extern int maqrun();

#ifdef HAVE_LIBSLANG
extern SLang_Name_Type Maq[];
#endif
#endif /* _MAQ_H_ */
@


1.2
log
@Version: 0.99g
@
text
@@


1.1
log
@Initial revision
@
text
@a3 6
#if defined(__STDC__) && !defined(__EMX__) 
#include <sys/cdefs.h>
#else
#define __P(a)()
#endif

d6 6
a11 1
extern char	funcstr[];
d13 1
d18 1
a20 2
typedef short int boolean;
extern	double **maqdata;
d25 1
d27 1
a27 1
extern	double (*func) __P ((int i, double *par));
d29 6
a34 4
extern	void Marquardt __P ((int m_, int n_,double *par_, double *g, double **v, double *inp, double *out));
extern boolean Funct __P ((int m, int n, double *par, double *rv));
extern void maqinit __P ((int m, int n));
extern void maqend __P (());
d37 7
a43 3
extern double **matr __P ((int rows, int cols));
extern void free_matr __P ((double **m, int rows));
extern void *memory __P ((void *ptr, size_t size, char *progname));
d45 3
@
