% Generated by sldoc (1.14, (C) 1996, 1997) Fri Jan 30 20:23:25 1998


Perror

void Perror(char *Eprogname,int exitval,int prr, char *from,

const char *descr,const char *xtr)

If prr > 0 then perror is also called.
Prints an error message on stderr and exits with level
exitval if this value is > 0
Normally called with something like:
Perror(progname,1,RCSid,"A fatal error","divide by zero");

from: perror.c

from file: doc


__getval

double __getval(TBL *tab, double xval)

get the y value from xval from table tab. Linear interpolation
is used after the search. This is the old method.

from: mktable.c

from file: doc


add_set

int add_set(xy *XY,char *name,char *fname,int points,int vunit,int tunit);

Adds an XY structure to the data structure and list returns the number
of the set made. If xy == NULL the XY structure is allocate with
points points. x and Y values are filled with zeros.

from: dataset.c

from file: doc


del_set

int del_set(int nr)

deletes dataset from mem and list and frees the memory allocted to the
actual data. Use getsetbyname() to find the sets

The entry in the data struct will remain but the pointer to xy will be
set to NULL, indicating the place is free.

from: dataset.c

from file: doc


dell_all_sets

void dell_all_sets()

deletes all datasets from memory

from: dataset.c

from file: doc


dumpset

int dumpset (int nr, FILE *stream)

Dumps set nr to stream stream.

from: dataset.c

from file: doc


get_data

int get_data(char *fname,char *name,int minpt)

Gets data_point(s) from file fname. The data will be added to the
dataset stuff using add_set. Columns can be given at the end of the
filename separated by comma's. i.e. afilename,1,3 would tell
get_data the get the data from afilename and use column 1 for X and
column 3 for Y.

If minpt > 0 then the function will exit if less then minpt are read
from fname.

Returns: number of points read

from: dataset.c

from file: doc


getsetbyname

int getsetbyname(char *s)

returns the number of a named set
searches for a set named name, returns -1 on error
empty positions (xy = NULL ) are skipped

from: dataset.c

from file: doc


getval

double getval(TBL *tab, double x)

Gets the y value corresponding to x from tab. This version uses
the lasthit hint in the table as a starting point for a
hunt phase. This is followed by bisection and interpolation.
In speed.inp this method is about 18% faster than the one without the
hunt fase.

from: mktable.c

from file: doc


memory

void *memory(void *ptr, size_t size, char *progname)

Allocates size bytes of memory if ptr == NULL, else
reallocates size bytes from ptr (ANSI realloc()). On
memory error, print diagnostic with progname and exit
with status 1.
Ret:	pointer to allocated memory, deallocate with free(3).

from: memory.c

from file: doc


mksetstats

void mksetstats(int dset)

Fill the simple statistics fields in dataset dset. These fields are:
xmin
xmax
ymin
ymax
xsum
ysum

from: dataset.c

from file: doc


printar

void printar(const char *des,double *ar, int pts)

prints the double array ar containing pts points with
description des to the output file

from: utout.c

from file: doc


printcom

void printcom (const char *des)

prints the comment string des to the output file

from: utout.c

from file: doc


printfl

void printfl(const char *des,double fl)

Prints the double variable fl with description des
to the output file

from: utout.c

from file: doc


printint
void printint(const char *des,int intje)

Prints the integer variable intje with description des
to the output file

from: utout.c

from file: doc


printstr

void printstr(const char *des,const char *str)

prints the string str with description des to the
output file

from: utout.c

from file: doc


showit

void showit (char *from,char *type, char *toshow,

int atverb,int whichverb)

prints stuff to showfile if whichverb >= atverb

from: pro_mesg.c

from file: doc


utout

void utout(int *tstep)

Initialize ini type output per timestep

from: utout.c

from file: doc
