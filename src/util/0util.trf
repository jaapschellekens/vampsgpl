.\" Generated by sldoc (1.14, (C) 1996, 1997) Fri Jan 30 20:23:26 1998
.if t .ds *p .sp 0.3v
.if n .ds *p .sp

.fp 2 CW
\*(*p
\*(*p
\fBPerror\fR
.nf
.ft 2
\*(*p
void Perror(char *Eprogname,int exitval,int prr, char *from,
\*(*p
.ft R
.fi
const char *descr,const char *xtr)
\*(*p
If \f2prr\fR > 0 then \f2perror\fR is also called.
Prints an error message on stderr and exits with level
exitval if this value is > 0
Normally called with something like:
\f2Perror(progname,1,RCSid,"A fatal error","divide by zero");\fR
\*(*p
from: \f2perror.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fB__getval\fR
.nf
.ft 2
\*(*p
double __getval(TBL *tab, double xval)
\*(*p
.ft R
.fi
get the y value from xval from table tab. Linear interpolation
is used after the search. This is the old method.
\*(*p
from: \f2mktable.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBadd_set\fR
.nf
.ft 2
\*(*p
int add_set(xy *XY,char *name,char *fname,int points,int vunit,int tunit);
\*(*p
.ft R
.fi
Adds an XY structure to the data structure and list returns the number
of the set made. If \f2xy == NULL\fR the XY structure is allocate with
\f2points\fR points. x and Y values are filled with zeros.
\*(*p
from: \f2dataset.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdel_set\fR
.nf
.ft 2
\*(*p
int del_set(int nr)
\*(*p
.ft R
.fi
deletes dataset from mem and list and frees the memory allocted to the
actual data. Use \f2getsetbyname()\fR to find the sets
\*(*p
The entry in the data struct will remain but the pointer to xy will be
set to \f2NULL\fR, indicating the place is free.
\*(*p
from: \f2dataset.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdell_all_sets\fR
.nf
.ft 2
\*(*p
void dell_all_sets()
\*(*p
.ft R
.fi
deletes all datasets from memory
\*(*p
from: \f2dataset.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdumpset\fR
.nf
.ft 2
\*(*p
int dumpset (int nr, FILE *stream)
\*(*p
.ft R
.fi
Dumps set \f2nr\fR to stream \f2stream\fR.
\*(*p
from: \f2dataset.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBget_data\fR
.nf
.ft 2
\*(*p
int get_data(char *fname,char *name,int minpt)
\*(*p
.ft R
.fi
Gets data_point(s) from file fname. The data will be added to the
dataset stuff using \f2add_set\fR. Columns can be given at the end of the
filename separated by comma's. i.e. \f2afilename,1,3\fR would tell
\f2get_data\fR the get the data from afilename and use column 1 for X and
column 3 for Y.
\*(*p
If \f2minpt > 0\fR then the function will exit if less then minpt are read
from \f2fname\fR.
\*(*p
Returns: number of points read
\*(*p
from: \f2dataset.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBgetsetbyname\fR
.nf
.ft 2
\*(*p
int getsetbyname(char *s)
\*(*p
.ft R
.fi
returns the number of a named set
searches for a set named name, returns -1 on error
empty positions (xy = NULL ) are skipped
\*(*p
from: \f2dataset.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBgetval\fR
.nf
.ft 2
\*(*p
double getval(TBL *tab, double x)
\*(*p
.ft R
.fi
Gets the y value corresponding to \f2x\fR from \f2tab\fR. This version uses
the lasthit hint in the table as a starting point for a
hunt phase. This is followed by bisection and interpolation.
In speed.inp this method is about 18% faster than the one without the
hunt fase.
\*(*p
from: \f2mktable.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBmemory\fR
.nf
.ft 2
\*(*p
void *memory(void *ptr, size_t size, char *progname)
\*(*p
.ft R
.fi
Allocates size bytes of memory if ptr == NULL, else
reallocates size bytes from ptr (ANSI realloc()). On
memory error, print diagnostic with progname and exit
with status 1.
Ret:	pointer to allocated memory, deallocate with free(3).
\*(*p
from: \f2memory.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBmksetstats\fR
.nf
.ft 2
\*(*p
void mksetstats(int dset)
\*(*p
.ft R
.fi
Fill the simple statistics fields in dataset \f2dset\fR. These fields are:
xmin
xmax
ymin
ymax
xsum
ysum
\*(*p
from: \f2dataset.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBprintar\fR
.nf
.ft 2
\*(*p
void printar(const char *des,double *ar, int pts)
\*(*p
.ft R
.fi
prints the double array \f2ar\fR containing \f2pts\fR points with
description \f2des\fR to the output file
\*(*p
from: \f2utout.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBprintcom\fR
.nf
.ft 2
\*(*p
void printcom (const char *des)
\*(*p
.ft R
.fi
prints the comment string \f2des\fR to the output file
\*(*p
from: \f2utout.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBprintfl\fR
.nf
.ft 2
\*(*p
void printfl(const char *des,double fl)
\*(*p
.ft R
.fi
Prints the double variable \f2fl\fR with description \f2des\fR
to the output file
\*(*p
from: \f2utout.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBprintint\fR
void printint(const char *des,int intje)
\*(*p
Prints the integer variable \f2intje\fR with description \f2des\fR
to the output file
\*(*p
from: \f2utout.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBprintstr\fR
.nf
.ft 2
\*(*p
void printstr(const char *des,const char *str)
\*(*p
.ft R
.fi
prints the string \f2str\fR with description \f2des\fR to the
output file
\*(*p
from: \f2utout.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBshowit\fR
.nf
.ft 2
\*(*p
void showit (char *from,char *type, char *toshow,
\*(*p
.ft R
.fi
int atverb,int whichverb)
\*(*p
prints stuff to showfile if whichverb >= atverb
\*(*p
from: \f2pro_mesg.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fButout\fR
.nf
.ft 2
\*(*p
void utout(int *tstep)
\*(*p
.ft R
.fi
Initialize ini type output per timestep
\*(*p
from: \f2utout.c\fR

from file: \f2doc\fR
