head	1.8;
access;
symbols;
locks;
comment	@ * @;


1.8
date	99.01.06.12.13.01;	author schj;	state Alpha;
branches;
next	1.7;

1.7
date	99.01.06.12.07.49;	author schj;	state Alpha;
branches;
next	1.6;

1.6
date	97.11.16.17.04.43;	author schj;	state Exp;
branches;
next	1.5;

1.5
date	97.09.09.11.53.18;	author schj;	state Exp;
branches;
next	1.4;

1.4
date	97.09.09.10.30.38;	author schj;	state Exp;
branches;
next	1.3;

1.3
date	97.09.09.09.40.05;	author schj;	state Exp;
branches;
next	1.2;

1.2
date	97.09.09.09.39.08;	author schj;	state Exp;
branches;
next	1.1;

1.1
date	97.09.09.08.36.57;	author schj;	state Exp;
branches;
next	;


desc
@First version
@


1.8
log
@Version: 0.99g
@
text
@/* $Header: /home/schj/src/vamps_0.99g/src/main/RCS/plot.c,v 1.7 1999/01/06 12:07:49 schj Alpha $ */
/* $RCSfile: plot.c,v $
*  $Author: schj $
*  $Date: 1999/01/06 12:07:49 $
*/

static char RCSid[] = "$Id: plot.c,v 1.7 1999/01/06 12:07:49 schj Alpha $";



#include <unistd.h>
#include <sys/types.h>
#include <signal.h>
#include <stdio.h>
#include <errno.h>
#include "vamps.h"
#include "swatsoil.h"
#include "soils.h"
#include "marquard.h"
#include "deffile.h"

char *scan_gp_cmd(char *cmd);
char tmp_prefix[128];
void gp_command(char *gnuplot);
FILE *gp_cmd_file;
extern int VampsPid;

#ifndef GNUPLOT
#define GNUPLOT "/usr/local/bin/gnuplot"
#endif

char graphcommand[256] = GNUPLOT;
/* char tmpfname[256]; */
char *tmpfname;

#ifdef HAVE_LIBSLANG
void gp_close();
extern char **sl_make_strv(char *,char *, int *);

void
v_plot (char *pltcmd)
{
	int i;

	if ((pltcmd = scan_gp_cmd(pltcmd)) != NULL){
		if (!gp_cmd_file){
			sprintf(tmp_prefix,"/tmp/%d.",VampsPid);
			gp_command(graphcommand);
			fprintf(gp_cmd_file,"%s\n",pltcmd);
			fflush (gp_cmd_file);
		}else{
			fprintf(gp_cmd_file,"%s\n",pltcmd);
			fflush (gp_cmd_file);
			fflush (gp_cmd_file);
		}
	}
}


void gp_command(char *gnuplot)
{
#ifdef HAVE_POPEN
	if (gp_cmd_file) /* close first if already open */
		gp_close();
	gp_cmd_file = popen(gnuplot, "w");
#else
	Perror(progname,0,0,RCSid,"popen not present on this system","Check configure");
#endif
}



void
gp_close()
{
#ifdef HAVE_POPEN
	if (gp_cmd_file)
		pclose(gp_cmd_file);
	gp_cmd_file = NULL;
	del_tmplist(1);
#else
	Perror(progname,0,0,RCSid,"popen not present on this system","Check configure");
#endif
}

/*C:scan_gp_cmd
 *@@ char *scan_gp_cmd(char *cmd)
 *
 * Scans the string cmd for special chars. Everything
 * between two \@@ chars is treated as an S-Lang matrix variable
 * to be plotted. Names delimited by the $'s are replaced by
 * the string representation of that S-Lang variable.
 * The variable is dumped to a file named @@tmp_prefix+variable_name._slmat@@.
 *
 * Bugs: temporary files are not cleaned.
 */ 
char *
scan_gp_cmd(char *cmd)
{
	char **v_cmd,**v_name,**vars,*str;
	static char buf[256],buf2[256],buf3[256];
	int nr,i,nrr,nrvars,i1 = 0;

	vars = sl_make_strv(cmd,"$",&nrvars);

	if (nrvars > 1){
		if (vars[0])
		strcpy(buf,vars[0]);
		for (i=1; i < nrvars; i++){
			if (i % 2 == 0) /* This can go unaltered to gnuplot */
				strcat(buf,vars[i]);
			else{
				sprintf(buf2,"string(%s);\n",vars[i]);
				SLang_load_string(buf2); 
				if (SLang_Error){
					SLang_Error = 0;
					sl_free_strv(vars);
					return NULL;
				}
				SLang_pop_string(&str, &i1);
				strcat(buf,str);
			}
		}
		cmd = buf;
	}
	v_cmd = sl_make_strv(cmd,"@@",&nr);
	sl_free_strv(vars);
	if (nr <= 1){ /* No S-Lang matrx variables present */
		sl_free_strv(v_cmd);
		return cmd;
	}else{ /* S-Lang variable(s) present, scan string...*/
		if (vars[0])
		strcpy(buf,v_cmd[0]);
		for (i = 1; i < nr; i++){
			if (i % 2 == 0) /* This can go unaltered to gnuplot */
				strcat(buf,v_cmd[i]);
			else{/* dump the var to a file and change the command */
				v_name = sl_make_strv(v_cmd[i],":",&nrr);
				if (nrr < 2){
					tmpfname = tempnam(NULL,NULL);
					sprintf(buf2,"mwrite(%s,\"%s\");\n", v_cmd[i],tmpfname);
					addtotmplist(tmpfname);
					(void)SLang_load_string(buf2);
					if (SLang_Error){
						SLang_Error = 0;
						sl_free_strv(v_cmd);
						sl_free_strv(v_name);
						return NULL;
					}
					sprintf(buf3,"\"%s\"",tmpfname);
					strcat(buf,buf3);
					free(tmpfname);
				}else{ /* assume varname:filename */
					tmpfname = tempnam(NULL,NULL);
					sprintf(buf2,"f_save(\"%s\",\"%s\",\"%s\");\n",v_name[0],v_name[1],tmpfname); 
					(void)SLang_load_string(buf2);
					if (SLang_Error){
						SLang_Error = 0;
						sl_free_strv(v_cmd);
						sl_free_strv(v_name);
						return NULL;
					}
					addtotmplist(tmpfname);

					sprintf(buf3,"\"%s\"",tmpfname);
					strcat(buf,buf3);
					free(tmpfname);
				}
				sl_free_strv(v_name);
			}
		}
		strcat(buf,"\n");
		sl_free_strv(v_cmd);
		return buf;
	}

}
#endif
@


1.7
log
@Version: 0.99g
@
text
@d1 1
a1 1
/* $Header: /home/schj/src/vamps_0.99e/src/main/RCS/plot.c,v 1.6 1997/11/16 17:04:43 schj Exp $ */
d4 1
a4 1
*  $Date: 1997/11/16 17:04:43 $
d7 1
a7 1
static char RCSid[] = "$Id: plot.c,v 1.6 1997/11/16 17:04:43 schj Exp $";
@


1.6
log
@added tempnam call, is not ansi
@
text
@d1 1
a1 1
/* $Header: /home/schjpriv/schj/src/vamps_0.99e/src/main/RCS/plot.c,v 1.5 1997/09/09 11:53:18 schj Exp $ */
d4 1
a4 1
*  $Date: 1997/09/09 11:53:18 $
d7 1
a7 1
static char RCSid[] = "$Id: plot.c,v 1.5 1997/09/09 11:53:18 schj Exp $";
d67 1
a67 1
	Perror(progname,0,RCSid,"popen not present on this system","Check configure");
d82 1
a82 1
	Perror(progname,0,RCSid,"popen not present on this system","Check configure");
@


1.5
log
@fixed tmp-list bug (wrong filename added)
@
text
@d1 1
a1 1
/* $Header: /home/schjpriv/schj/src/vamps_0.99e/src/main/RCS/plot.c,v 1.4 1997/09/09 10:30:38 schj Exp $ */
d4 1
a4 1
*  $Date: 1997/09/09 10:30:38 $
d7 1
a7 1
static char RCSid[] = "$Id: plot.c,v 1.4 1997/09/09 10:30:38 schj Exp $";
d33 2
a34 1
char tmpfname[256];
d54 1
d66 2
d80 3
a82 1
	del_tmplist();
d140 2
a141 2
					sprintf(buf2,"mwrite(%s,\"%s%s\");\n", v_cmd[i],tmp_prefix,v_cmd[i]);
					sprintf(tmpfname,"%s%s",tmp_prefix,v_cmd[i]);
d150 1
a150 1
					sprintf(buf3,"\"%s%s\"",tmp_prefix,v_cmd[i]);
d152 1
d154 2
a155 1
					sprintf(buf2,"f_save(\"%s\",\"%s\",\"%s%s\");\n",v_name[0],v_name[1],tmp_prefix,v_name[0]); 
a162 1
					sprintf(tmpfname,"%s%s",tmp_prefix,v_name[0]);
d165 1
a165 1
					sprintf(buf3,"\"%s%s\"",tmp_prefix,v_name[0]);
d167 1
d176 1
@


1.4
log
@added del_tmplist call to gp_close (removes tmp files)
@
text
@d1 1
a1 1
/* $Header: /home/schjpriv/schj/src/vamps_0.99e/src/main/RCS/plot.c,v 1.3 1997/09/09 09:40:05 schj Exp schj $ */
d4 1
a4 1
*  $Date: 1997/09/09 09:40:05 $
d7 1
a7 1
static char RCSid[] = "$Id: plot.c,v 1.3 1997/09/09 09:40:05 schj Exp schj $";
d136 1
a143 1
					addtotmplist(tmpfname);
d155 1
a155 1
					sprintf(tmpfname,"%s%s",tmp_prefix,v_name[i]);
@


1.3
log
@see previous command
@
text
@d1 1
a1 1
/* $Header: /home/schjpriv/schj/src/vamps_0.99e/src/main/RCS/plot.c,v 1.2 1997/09/09 09:39:08 schj Exp schj $ */
d4 1
a4 1
*  $Date: 1997/09/09 09:39:08 $
d7 1
a7 1
static char RCSid[] = "$Id: plot.c,v 1.2 1997/09/09 09:39:08 schj Exp schj $";
d25 1
a25 1
static FILE *gp_cmd_file;
d73 4
a76 3
    pclose(gp_cmd_file);
    gp_cmd_file = NULL;
    del_tmplist();
@


1.2
log
@Added tmplist stuff. files should now be deleted
@
text
@d1 1
a1 1
/* $Header: /home/schjpriv/schj/src/vamps_0.99e/src/main/RCS/plot.c,v 1.1 1997/09/09 08:36:57 schj Exp schj $ */
d4 1
a4 1
*  $Date: 1997/09/09 08:36:57 $
d7 1
a7 1
static char RCSid[] = "$Id: plot.c,v 1.1 1997/09/09 08:36:57 schj Exp schj $";
d75 1
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/* $Header: /home/schj/src/vamps_0.99c/src/main/RCS/fit.c,v 1.3 1997/01/16 14:57:29 schj Exp $ */
/* $RCSfile: fit.c,v $
d4 1
a4 1
*  $Date: 1997/01/16 14:57:29 $
d7 1
a7 1
static char RCSid[] = "$Id: plot.c,v 1.3 1997/01/16 14:57:29 schj Exp $";
d27 1
d31 1
d82 1
a82 1
 *@@ between two @@ chars is treated as an S-Lang matrix variable
@
