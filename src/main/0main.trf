.\" Generated by sldoc (1.14, (C) 1996, 1997) Fri Jan 30 20:23:27 1998
.if t .ds *p .sp 0.3v
.if n .ds *p .sp

.fp 2 CW
\*(*p
\*(*p
\fBaddtohist\fR
.nf
.ft 2
\*(*p
int addtohist(char *item)
\*(*p
.ft R
.fi
adds \f2item\fR to the history list
*%
\*(*p
from: \f2hist.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBaddtotmplist\fR
.nf
.ft 2
\*(*p
int addtotmplist(char *item)
\*(*p
.ft R
.fi
adds \f2item\fR to the history list
*%
\*(*p
from: \f2tmplist.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBcktype\fR
.nf
.ft 2
\*(*p
int cktype (char *fmt)
\*(*p
.ft R
.fi
Checks type that should be pushed on stack
Returns one of the SC_* defines
\*(*p
from: \f2scanf.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdel_tmplist\fR
.nf
.ft 2
\*(*p
void del_tmplist(int files)
\*(*p
.ft R
.fi
Deletes the files in the tmp list if \f2files\fR > 0. Otherwise only
the list itself is freed 
\*(*p
from: \f2tmplist.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdisclaim\fR
.nf
.ft 2
\*(*p
void disclaim(char *progname)
\*(*p
.ft R
.fi
shows a short version of the GNU public licence on stderr
\*(*p
from: \f2vamps.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdorun\fR
.nf
.ft 2
\*(*p
Void dorun()
\*(*p
.ft R
.fi
Does the main body of the model run. From the first to the last
timestep.
\*(*p
from: \f2vamps.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdotail\fR
.nf
.ft 2
\*(*p
Void dotail()
\*(*p
.ft R
.fi
Does 'tail' part of a model run. Cleans op files and memory. Also saves
some stuff to disk.
\*(*p
from: \f2vamps.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBinit_s\fR
@void init_s (char *vamps_sl)
\*(*p
Initializes the S-Lang system and loads the startup file
\f2vamps_sl\fR.
\*(*p
from: \f2init_s.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBlai_to_s\fR
.nf
.ft 2
\*(*p
double lai_to_s (double lai)
\*(*p
.ft R
.fi
Converts lai to canopy storage by a user defined function in s_lang
called Slai_to_s (lai).
\*(*p
from: \f2init_s.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBloaddefaults\fR
.nf
.ft 2
\*(*p
void loaddefaults ()
\*(*p
.ft R
.fi
loads defaults from the defaults-file. After that the defaults
in the vamps section from the input file are loaded
\*(*p
from: \f2vamps.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBmain\fR
.nf
.ft 2
\*(*p
int main (int argc, char *argv[])
\*(*p
.ft R
.fi
The main vamps program
\*(*p
from: \f2vamps.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBonsig\fR
.nf
.ft 2
\*(*p
void onsig (int sig)
\*(*p
.ft R
.fi
New signal handler. Setup is run again after handling the signal as
Linux resets them to default behaviour. I suppose this is no
problem on other systems ;-).
Under MSDOS (djgpp) the stuff does not seem to work (what's new). 
\*(*p
from: \f2sigs.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBprelim\fR
.nf
.ft 2
\*(*p
void prelim(void)
\*(*p
.ft R
.fi
from: \f2vamps.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBprocesskey\fR
.nf
.ft 2
\*(*p
void processkey(char ch)
\*(*p
.ft R
.fi
from: \f2vamps.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBpushit\fR
.nf
.ft 2
\*(*p
int pushit(int type, FILE *sfile, char *fmt, int *fscanret);
\*(*p
.ft R
.fi
Pushit take a type, a stream, and an one-item format string.
pushit checks the S-Lang type to conversion-type relation. It then
uses fscanf to do the conversion and pushes the items on the
stack depending on conversion flags.
fscanret holds fscanf's return value.
\*(*p
from: \f2scanf.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBscan_gp_cmd\fR
.nf
.ft 2
\*(*p
char *scan_gp_cmd(char *cmd)
\*(*p
.ft R
.fi
Scans the string cmd for special chars. Everything
between two \e@ chars is treated as an S-Lang matrix variable
to be plotted. Names delimited by the $'s are replaced by
the string representation of that S-Lang variable.
The variable is dumped to a file named \f2tmp_prefix+variable_name._slmat\fR.
\*(*p
Bugs: temporary files are not cleaned.
\*(*p
from: \f2plot.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBsetsig\fR
.nf
.ft 2
\*(*p
void setsig()
\*(*p
.ft R
.fi
set up custom signal handling. Works on UNIX systems, rather broken
on other systems 
\*(*p
from: \f2sigs.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBshowusage\fR
.nf
.ft 2
\*(*p
void showusage( char *argv, int verb)
\*(*p
.ft R
.fi
shows vamps program indentification and a short (verb == 0 )
or long (verb >0 ) command line explanation.
\*(*p
from: \f2vamps.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBsl_fscanf\fR
.nf
.ft 2
\*(*p
int sl_fscanf(FILE *sfile, char *fmt, char *s)
\*(*p
.ft R
.fi
Breaks the fmt string into single-item strings for pushit or
spushit to process. If FILE == NULL spushit is called, otherwise
pushit is called.
\*(*p
return: the number of items pushed on the stack.
\*(*p
from: \f2scanf.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBsl_make_strv\fR
char **sl_make_strv(char *str, char *sep, int *vlen)
Returns malloc'ed char ** of vlen malloc'ed char * from
string str, separated by one or more characters from sep;
nf is minimum 1, str is not modified, trailing newline is
stripped. Use sl_free_strv() to free memory.
\*(*p
from: \f2misc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBspushit\fR
.nf
.ft 2
\*(*p
int spushit(int type, char *s, char *fmt, int *sscanret, int *startpos);
\*(*p
.ft R
.fi
spushit take a type, a string, an one-item format string and a start
position (needed because we uses multiple calls to sscanf);
pushit checks the S-Lang type to conversion-type relation. It then
uses sscanf to do the conversion and pushes the items on the
stack depending on conversion flags.
sscanret holds sscanf's return value.
\*(*p
from: \f2scanf.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBunsetsig\fR
.nf
.ft 2
\*(*p
int unsetsig()
\*(*p
.ft R
.fi
resets signal handling
\*(*p
from: \f2sigs.c\fR

from file: \f2doc\fR
