% Generated by sldoc (1.14, (C) 1996, 1997) Fri Jan 30 20:23:27 1998


addtohist

int addtohist(char *item)

adds item to the history list
*%

from: hist.c

from file: doc


addtotmplist

int addtotmplist(char *item)

adds item to the history list
*%

from: tmplist.c

from file: doc


cktype

int cktype (char *fmt)

Checks type that should be pushed on stack
Returns one of the SC_* defines

from: scanf.c

from file: doc


del_tmplist

void del_tmplist(int files)

Deletes the files in the tmp list if files > 0. Otherwise only
the list itself is freed 

from: tmplist.c

from file: doc


disclaim

void disclaim(char *progname)

shows a short version of the GNU public licence on stderr

from: vamps.c

from file: doc


dorun

Void dorun()

Does the main body of the model run. From the first to the last
timestep.

from: vamps.c

from file: doc


dotail

Void dotail()

Does 'tail' part of a model run. Cleans op files and memory. Also saves
some stuff to disk.

from: vamps.c

from file: doc


init_s
void init_s (char *vamps_sl)

Initializes the S-Lang system and loads the startup file
vamps_sl.

from: init_s.c

from file: doc


lai_to_s

double lai_to_s (double lai)

Converts lai to canopy storage by a user defined function in s_lang
called Slai_to_s (lai).

from: init_s.c

from file: doc


loaddefaults

void loaddefaults ()

loads defaults from the defaults-file. After that the defaults
in the vamps section from the input file are loaded

from: vamps.c

from file: doc


main

int main (int argc, char *argv[])

The main vamps program

from: vamps.c

from file: doc


onsig

void onsig (int sig)

New signal handler. Setup is run again after handling the signal as
Linux resets them to default behaviour. I suppose this is no
problem on other systems ;-).
Under MSDOS (djgpp) the stuff does not seem to work (what's new). 

from: sigs.c

from file: doc


prelim

void prelim(void)

from: vamps.c

from file: doc


processkey

void processkey(char ch)

from: vamps.c

from file: doc


pushit

int pushit(int type, FILE *sfile, char *fmt, int *fscanret);

Pushit take a type, a stream, and an one-item format string.
pushit checks the S-Lang type to conversion-type relation. It then
uses fscanf to do the conversion and pushes the items on the
stack depending on conversion flags.
fscanret holds fscanf's return value.

from: scanf.c

from file: doc


scan_gp_cmd

char *scan_gp_cmd(char *cmd)

Scans the string cmd for special chars. Everything
between two \ chars is treated as an S-Lang matrix variable
to be plotted. Names delimited by the $'s are replaced by
the string representation of that S-Lang variable.
The variable is dumped to a file named tmp_prefix+variable_name._slmat.

Bugs: temporary files are not cleaned.

from: plot.c

from file: doc


setsig

void setsig()

set up custom signal handling. Works on UNIX systems, rather broken
on other systems 

from: sigs.c

from file: doc


showusage

void showusage( char *argv, int verb)

shows vamps program indentification and a short (verb == 0 )
or long (verb >0 ) command line explanation.

from: vamps.c

from file: doc


sl_fscanf

int sl_fscanf(FILE *sfile, char *fmt, char *s)

Breaks the fmt string into single-item strings for pushit or
spushit to process. If FILE == NULL spushit is called, otherwise
pushit is called.

return: the number of items pushed on the stack.

from: scanf.c

from file: doc


sl_make_strv
char **sl_make_strv(char *str, char *sep, int *vlen)
Returns malloc'ed char ** of vlen malloc'ed char * from
string str, separated by one or more characters from sep;
nf is minimum 1, str is not modified, trailing newline is
stripped. Use sl_free_strv() to free memory.

from: misc.c

from file: doc


spushit

int spushit(int type, char *s, char *fmt, int *sscanret, int *startpos);

spushit take a type, a string, an one-item format string and a start
position (needed because we uses multiple calls to sscanf);
pushit checks the S-Lang type to conversion-type relation. It then
uses sscanf to do the conversion and pushes the items on the
stack depending on conversion flags.
sscanret holds sscanf's return value.

from: scanf.c

from file: doc


unsetsig

int unsetsig()

resets signal handling

from: sigs.c

from file: doc
