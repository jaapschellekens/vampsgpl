.\" Generated by sldoc (1.14, (C) 1996, 1997) Sat Nov  8 19:46:38 1997
.if t .ds *p .sp 0.3v
.if n .ds *p .sp

.fp 2 CW
\*(*p
\*(*p
\fBbocobot\fR
.nf
.ft 2
\*(*p
void bocobot(int pt)
\*(*p
.ft R
.fi
Determines the values of the boundary conditions at the bottom of
the soil profile
\*(*p
Returns:  nothing 
\*(*p
from: \f2soilboun.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBbocotop\fR
.nf
.ft 2
\*(*p
double bocotop (double *kgeo0,int *ftoph)
\*(*p
.ft R
.fi
Determines the top boundary conditions for each day (timestep)
\*(*p
Returns:  qtop
\*(*p
from: \f2soilboun.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBckcnv\fR
.nf
.ft 2
\*(*p
int (*ckcnv)() = NULL;
\*(*p
.ft R
.fi
Pointer to function that checks for convergence. At the
moment 2 are present, th_ckcnv (swattr method) and mb_ckcnv
(a new experimental method). The pointer is set in \f2getparm.c\fR.
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBcksatu\fR
.nf
.ft 2
\*(*p
int cksatu()
\*(*p
.ft R
.fi
Checks if the profile is completely saturated.
Returns: 1 if completely saturated, otherwise 0
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdet_hatm\fR
.nf
.ft 2
\*(*p
double det_hatm(int i)
\*(*p
.ft R
.fi
Description: gets  hatm for step i
Returns: nothing
Remarks: hatm calculation kind of stupid
\*(*p
from: \f2det_hatm.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdetavgthet\fR
.nf
.ft 2
\*(*p
double detavgtheta(int layr)
\*(*p
.ft R
.fi
Description: determine average theta until (not including) layer layr
\*(*p
Returns: weighted average theta 
\*(*p
from: \f2misc_p.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdethowsat\fR
.nf
.ft 2
\*(*p
void dethowsat
\*(*p
.ft R
.fi
Description: Determines relative saturation
\*(*p
Returns: nothing 
\*(*p
from: \f2misc_p.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdt\fR
.nf
.ft 2
\*(*p
double dtmax
\*(*p
.ft R
.fi
Description: maximum allowed dt, default = 0.1
\*(*p
from: \f2timestep.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdtm1\fR
.nf
.ft 2
\*(*p
double dtm1
\*(*p
.ft R
.fi
Description: previous dt
\*(*p
from: \f2timestep.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdtmax\fR
.nf
.ft 2
\*(*p
double dtmax
\*(*p
.ft R
.fi
Description: maximum allowed dt, default = 0.1
\*(*p
from: \f2timestep.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBdtmin\fR
.nf
.ft 2
\*(*p
double tmin
\*(*p
.ft R
.fi
Description: minimum allowed dt
\*(*p
from: \f2timestep.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBfillmat\fR
.nf
.ft 2
\*(*p
void fillmat(double **mat,double a[], double b[], double c[])
\*(*p
.ft R
.fi
Description: Fills the matrix mat in the compact 45oC rotated form
Returns: nothing
\*(*p
from: \f2band.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBfluxes\fR
.nf
.ft 2
\*(*p
void fluxes(void)
\*(*p
.ft R
.fi
Determines the fluxes between the nodes and total bottom flux.
Returns: nothing
\*(*p
from: \f2fluxes.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBfreescratch\fR
.nf
.ft 2
\*(*p
void freescratch()
\*(*p
.ft R
.fi
Frees the scratch arrays used in \f2headcalc()\fR. This is called from
\f2postsoil()\fR
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBgetparms\fR
.nf
.ft 2
\*(*p
int getparams(char *infilename)
\*(*p
.ft R
.fi
Gets the parameters from the inputfile needed for soil module
Returns: 0 (always)
Remarks: should be cleaned
\*(*p
from: \f2getparm.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBh2dmc_0\fR
.nf
.ft 2
\*(*p
double h2dmc_0 (int nr, double head)
\*(*p
.ft R
.fi
Description: Calculates the differential moisture capacity as a
function of pressure head. This is the Campbel 1994
\*(*p
Returns: differential moisture content
\*(*p
from: \f2soilut.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBh2dmc_1\fR
.nf
.ft 2
\*(*p
double h2dmc_1 (int nr, double head)
\*(*p
.ft R
.fi
Calculates the differential moisture capacity as a function of pressure head
\*(*p
Returns: differential moisture capacity
\*(*p
from: \f2soilut.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBh2t_0\fR
.nf
.ft 2
\*(*p
double h2t_0 (int nr, double head)
\*(*p
.ft R
.fi
Calculate the water content at layer j from pressure
head \f2head\fR
\*(*p
Returns: theta
\*(*p
from: \f2soilut.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBh_by_banddiag\fR
.nf
.ft 2
\*(*p
void h_by_banddiag()
\*(*p
.ft R
.fi
Description: Solves the tridiagonal matrix as if it was a more
general band-diagonal matrix. This is only needed if a zero pivot
occurs in tridiag. This is seldom needed.
\*(*p
Returns: nothing+
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBh_by_tridiag\fR
.nf
.ft 2
\*(*p
int h_by_tridiag()
\*(*p
.ft R
.fi
Description: Solves the matrix by the simple and fast algorithm for
a tridiagonal matrix. If a zero pivot occurs it exits and returns 1
and the more general method for solving band-diagonal matrixes
should be used. 0 is returned on success
\*(*p
Returns: 0 on sucess, 1 on failure
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBh_itt\fR
.nf
.ft 2
\*(*p
void h_itt()
\*(*p
.ft R
.fi
Calculates new head via LU decomposition and uses 2 xtra itterations
to get full machine precision in the solution. It is the slowest
of the three possible solutions.
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBh_satu\fR
.nf
.ft 2
\*(*p
void h_satu()
\*(*p
.ft R
.fi
Changes the profile from completely saturated to almost saturated
\*(*p
Returns: nothing 
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBheadcalc\fR
.nf
.ft 2
\*(*p
void headcalc(int pt, double *t)
\*(*p
.ft R
.fi
This is the new revamped headcalc. It first checks to
see if the profile is completely saturated. If so a trick from
\f2swat91\fR is used (\f2h_sat()\fR) to change to profile to almost saturated.
Unsaturated flow is first solved via a tridiagonal matrix
solution. In some cases this fails and a more general (band
diagonal) solution is used (See Press et al) which is somewhat
slower but more robust
\*(*p
Returns: 1 if convergence failed, 0 if success
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBinitial\fR
.nf
.ft 2
\*(*p
void initial()
\*(*p
.ft R
.fi
Sets initial values
\*(*p
Return:  nothing
\*(*p
from: \f2swatsoil.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBintergral\fR
.nf
.ft 2
\*(*p
void integral(int i)
\*(*p
.ft R
.fi
Integrate variables over timestep and calculates mass bal
\*(*p
from: \f2integral.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBmat_cof_up\fR
.nf
.ft 2
\*(*p
void mat_cof_up(void)
\*(*p
.ft R
.fi
Description: Updated the coeffcients b,f of the tridiagonal
matrix. This is used in the iteration step.
\*(*p
Returns: nothing
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBmkscratch\fR
@void mkscratch()
Allocated the scratch arrays needed in \f2headcalc()\fR. They are freed
in \f2freescratch\fR.
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBreadstype\fR
.nf
.ft 2
\*(*p
int readstype (char *section, char *fname, int layer)
\*(*p
.ft R
.fi
Allocates new sp if needed and reads soil parameters
from section and calls one of the method specific read functions
\*(*p
Returns: index of sp linked to node 
\*(*p
from: \f2swatsoil.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBreduceeva\fR
.nf
.ft 2
\*(*p
double reduceva (int swreduc)
\*(*p
.ft R
.fi
Calculates reduction of soil evaporation
\*(*p
Returns reducted soil evaporation 
\*(*p
from: \f2reduceva.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBsavevars\fR
.nf
.ft 2
\*(*p
void savevars()
\*(*p
.ft R
.fi
Description: Saves spare copies of the h, theta and diffmoist arrays
\*(*p
Returns: nothing
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBsetzero\fR
.nf
.ft 2
\*(*p
void setzero(void)
\*(*p
.ft R
.fi
sets intemediate totals to zero
\*(*p
Returns:  nothing 
\*(*p
from: \f2setzero.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBsmd\fR
.nf
.ft 2
\*(*p
double smd(double drz,doubel fieldh)
\*(*p
.ft R
.fi
calculates the soil moisture deficit until depth drz
(usually rooting depth) with fieldcapacity at fieldh
\*(*p
Returns:  soil moisture deficit 
\*(*p
from: \f2misc_p.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBt\fR
.nf
.ft 2
\*(*p
int th_ckcnv()
\*(*p
.ft R
.fi
original swatr method to check convergence
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBt2h_0\fR
.nf
.ft 2
\*(*p
double t2h_0 (int nr, double wcon, double depth)
\*(*p
.ft R
.fi
Calculates the pressure heads at layer j from the moisture content
using Clapp/Hornberger
Returns: pressure head
\*(*p
from: \f2soilut.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBt2k_0\fR
.nf
.ft 2
\*(*p
double t2k_0(int nr, double wcon)
\*(*p
.ft R
.fi
Description: Calculation of hydraulic conductivity from water
content. Clapp Hornberger, or a look up table. This replaces
hconode()
\*(*p
Returns: k_unsat
\*(*p
from: \f2soilut.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBth_ckcnv\fR
.nf
.ft 2
\*(*p
int th_ckcnv()
\*(*p
.ft R
.fi
original swatr method to check convergence
\*(*p
from: \f2headcalc.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBthetol\fR
.nf
.ft 2
\*(*p
double thetol
\*(*p
.ft R
.fi
Maximum allowed change of theta at this dt, default = 0.00001
\*(*p
from: \f2timestep.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBtimestep\fR
.nf
.ft 2
\*(*p
double timestep(double t, double e_t, double *dt, double *dtm1)
\*(*p
.ft R
.fi
Description: Calculation of timestep (\f2dt\fR) depending on theta
changes and actual time (t). Step is synchronized to \f2e_t\fR (end
of timestep.
\*(*p
Return: new timestep (dt)
\*(*p
from: \f2timestep.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBtm1\fR
.nf
.ft 2
\*(*p
double tm1
\*(*p
.ft R
.fi
Description: previous time
\*(*p
from: \f2timestep.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBtstep_soil\fR
.nf
.ft 2
\*(*p
void tstep_soil (int i,double e_t, double t_prec, double t_intc,double t_ptra,
			double t_peva)
\*(*p
.ft R
.fi
Description: Calculated theta etc for end of time in record  i
of the precipitation file. This is the core of the soil module
\*(*p
Returns: nothing
\*(*p
from: \f2swatsoil.c\fR

from file: \f2doc\fR
\*(*p
\*(*p
\fBwatcon\fR
.nf
.ft 2
\*(*p
void watcon(void)
\*(*p
.ft R
.fi
Determines the actual water content of the profile
\*(*p
from: \f2soilut.c\fR

from file: \f2doc\fR
