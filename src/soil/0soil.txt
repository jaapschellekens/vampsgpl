% Generated by sldoc (1.14, (C) 1996, 1997) Sat Nov  8 19:46:36 1997


bocobot

void bocobot(int pt)

Determines the values of the boundary conditions at the bottom of
the soil profile

Returns:  nothing 

from: soilboun.c

from file: doc


bocotop

double bocotop (double *kgeo0,int *ftoph)

Determines the top boundary conditions for each day (timestep)

Returns:  qtop

from: soilboun.c

from file: doc


ckcnv

int (*ckcnv)() = NULL;

Pointer to function that checks for convergence. At the
moment 2 are present, th_ckcnv (swattr method) and mb_ckcnv
(a new experimental method). The pointer is set in getparm.c.

from: headcalc.c

from file: doc


cksatu

int cksatu()

Checks if the profile is completely saturated.
Returns: 1 if completely saturated, otherwise 0

from: headcalc.c

from file: doc


det_hatm

double det_hatm(int i)

Description: gets  hatm for step i
Returns: nothing
Remarks: hatm calculation kind of stupid

from: det_hatm.c

from file: doc


detavgthet

double detavgtheta(int layr)

Description: determine average theta until (not including) layer layr

Returns: weighted average theta 

from: misc_p.c

from file: doc


dethowsat

void dethowsat

Description: Determines relative saturation

Returns: nothing 

from: misc_p.c

from file: doc


dt

double dtmax

Description: maximum allowed dt, default = 0.1

from: timestep.c

from file: doc


dtm1

double dtm1

Description: previous dt

from: timestep.c

from file: doc


dtmax

double dtmax

Description: maximum allowed dt, default = 0.1

from: timestep.c

from file: doc


dtmin

double tmin

Description: minimum allowed dt

from: timestep.c

from file: doc


fillmat

void fillmat(double **mat,double a[], double b[], double c[])

Description: Fills the matrix mat in the compact 45oC rotated form
Returns: nothing

from: band.c

from file: doc


fluxes

void fluxes(void)

Determines the fluxes between the nodes and total bottom flux.
Returns: nothing

from: fluxes.c

from file: doc


freescratch

void freescratch()

Frees the scratch arrays used in headcalc(). This is called from
postsoil()

from: headcalc.c

from file: doc


getparms

int getparams(char *infilename)

Gets the parameters from the inputfile needed for soil module
Returns: 0 (always)
Remarks: should be cleaned

from: getparm.c

from file: doc


h2dmc_0

double h2dmc_0 (int nr, double head)

Description: Calculates the differential moisture capacity as a
function of pressure head. This is the Campbel 1994

Returns: differential moisture content

from: soilut.c

from file: doc


h2dmc_1

double h2dmc_1 (int nr, double head)

Calculates the differential moisture capacity as a function of pressure head

Returns: differential moisture capacity

from: soilut.c

from file: doc


h2t_0

double h2t_0 (int nr, double head)

Calculate the water content at layer j from pressure
head head

Returns: theta

from: soilut.c

from file: doc


h_by_banddiag

void h_by_banddiag()

Description: Solves the tridiagonal matrix as if it was a more
general band-diagonal matrix. This is only needed if a zero pivot
occurs in tridiag. This is seldom needed.

Returns: nothing+

from: headcalc.c

from file: doc


h_by_tridiag

int h_by_tridiag()

Description: Solves the matrix by the simple and fast algorithm for
a tridiagonal matrix. If a zero pivot occurs it exits and returns 1
and the more general method for solving band-diagonal matrixes
should be used. 0 is returned on success

Returns: 0 on sucess, 1 on failure

from: headcalc.c

from file: doc


h_itt

void h_itt()

Calculates new head via LU decomposition and uses 2 xtra itterations
to get full machine precision in the solution. It is the slowest
of the three possible solutions.

from: headcalc.c

from file: doc


h_satu

void h_satu()

Changes the profile from completely saturated to almost saturated

Returns: nothing 

from: headcalc.c

from file: doc


headcalc

void headcalc(int pt, double *t)

This is the new revamped headcalc. It first checks to
see if the profile is completely saturated. If so a trick from
swat91 is used (h_sat()) to change to profile to almost saturated.
Unsaturated flow is first solved via a tridiagonal matrix
solution. In some cases this fails and a more general (band
diagonal) solution is used (See Press et al) which is somewhat
slower but more robust

Returns: 1 if convergence failed, 0 if success

from: headcalc.c

from file: doc


initial

void initial()

Sets initial values

Return:  nothing

from: swatsoil.c

from file: doc


intergral

void integral(int i)

Integrate variables over timestep and calculates mass bal

from: integral.c

from file: doc


mat_cof_up

void mat_cof_up(void)

Description: Updated the coeffcients b,f of the tridiagonal
matrix. This is used in the iteration step.

Returns: nothing

from: headcalc.c

from file: doc


mkscratch
void mkscratch()
Allocated the scratch arrays needed in headcalc(). They are freed
in freescratch.

from: headcalc.c

from file: doc


readstype

int readstype (char *section, char *fname, int layer)

Allocates new sp if needed and reads soil parameters
from section and calls one of the method specific read functions

Returns: index of sp linked to node 

from: swatsoil.c

from file: doc


reduceeva

double reduceva (int swreduc)

Calculates reduction of soil evaporation

Returns reducted soil evaporation 

from: reduceva.c

from file: doc


savevars

void savevars()

Description: Saves spare copies of the h, theta and diffmoist arrays

Returns: nothing

from: headcalc.c

from file: doc


setzero

void setzero(void)

sets intemediate totals to zero

Returns:  nothing 

from: setzero.c

from file: doc


smd

double smd(double drz,doubel fieldh)

calculates the soil moisture deficit until depth drz
(usually rooting depth) with fieldcapacity at fieldh

Returns:  soil moisture deficit 

from: misc_p.c

from file: doc


t

int th_ckcnv()

original swatr method to check convergence

from: headcalc.c

from file: doc


t2h_0

double t2h_0 (int nr, double wcon, double depth)

Calculates the pressure heads at layer j from the moisture content
using Clapp/Hornberger
Returns: pressure head

from: soilut.c

from file: doc


t2k_0

double t2k_0(int nr, double wcon)

Description: Calculation of hydraulic conductivity from water
content. Clapp Hornberger, or a look up table. This replaces
hconode()

Returns: k_unsat

from: soilut.c

from file: doc


th_ckcnv

int th_ckcnv()

original swatr method to check convergence

from: headcalc.c

from file: doc


thetol

double thetol

Maximum allowed change of theta at this dt, default = 0.00001

from: timestep.c

from file: doc


timestep

double timestep(double t, double e_t, double *dt, double *dtm1)

Description: Calculation of timestep (dt) depending on theta
changes and actual time (t). Step is synchronized to e_t (end
of timestep.

Return: new timestep (dt)

from: timestep.c

from file: doc


tm1

double tm1

Description: previous time

from: timestep.c

from file: doc


tstep_soil

void tstep_soil (int i,double e_t, double t_prec, double t_intc,double t_ptra,
			double t_peva)

Description: Calculated theta etc for end of time in record  i
of the precipitation file. This is the core of the soil module

Returns: nothing

from: swatsoil.c

from file: doc


watcon

void watcon(void)

Determines the actual water content of the profile

from: soilut.c

from file: doc
